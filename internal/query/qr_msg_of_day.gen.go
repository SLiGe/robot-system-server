// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"robot-system-server/internal/model"
)

func newQrMsgOfDay(db *gorm.DB, opts ...gen.DOOption) qrMsgOfDay {
	_qrMsgOfDay := qrMsgOfDay{}

	_qrMsgOfDay.qrMsgOfDayDo.UseDB(db, opts...)
	_qrMsgOfDay.qrMsgOfDayDo.UseModel(&model.QrMsgOfDay{})

	tableName := _qrMsgOfDay.qrMsgOfDayDo.TableName()
	_qrMsgOfDay.ALL = field.NewAsterisk(tableName)
	_qrMsgOfDay.ID = field.NewInt64(tableName, "id")
	_qrMsgOfDay.Sentence = field.NewString(tableName, "sentence")
	_qrMsgOfDay.CreateDate = field.NewField(tableName, "create_date")
	_qrMsgOfDay.SendDate = field.NewTime(tableName, "send_date")

	_qrMsgOfDay.fillFieldMap()

	return _qrMsgOfDay
}

// qrMsgOfDay 每日一句
type qrMsgOfDay struct {
	qrMsgOfDayDo

	ALL        field.Asterisk
	ID         field.Int64
	Sentence   field.String
	CreateDate field.Field
	SendDate   field.Time // 发送日期

	fieldMap map[string]field.Expr
}

func (q qrMsgOfDay) Table(newTableName string) *qrMsgOfDay {
	q.qrMsgOfDayDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrMsgOfDay) As(alias string) *qrMsgOfDay {
	q.qrMsgOfDayDo.DO = *(q.qrMsgOfDayDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrMsgOfDay) updateTableName(table string) *qrMsgOfDay {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Sentence = field.NewString(table, "sentence")
	q.CreateDate = field.NewField(table, "create_date")
	q.SendDate = field.NewTime(table, "send_date")

	q.fillFieldMap()

	return q
}

func (q *qrMsgOfDay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrMsgOfDay) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["id"] = q.ID
	q.fieldMap["sentence"] = q.Sentence
	q.fieldMap["create_date"] = q.CreateDate
	q.fieldMap["send_date"] = q.SendDate
}

func (q qrMsgOfDay) clone(db *gorm.DB) qrMsgOfDay {
	q.qrMsgOfDayDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrMsgOfDay) replaceDB(db *gorm.DB) qrMsgOfDay {
	q.qrMsgOfDayDo.ReplaceDB(db)
	return q
}

type qrMsgOfDayDo struct{ gen.DO }

type IQrMsgOfDayDo interface {
	gen.SubQuery
	Debug() IQrMsgOfDayDo
	WithContext(ctx context.Context) IQrMsgOfDayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrMsgOfDayDo
	WriteDB() IQrMsgOfDayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrMsgOfDayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrMsgOfDayDo
	Not(conds ...gen.Condition) IQrMsgOfDayDo
	Or(conds ...gen.Condition) IQrMsgOfDayDo
	Select(conds ...field.Expr) IQrMsgOfDayDo
	Where(conds ...gen.Condition) IQrMsgOfDayDo
	Order(conds ...field.Expr) IQrMsgOfDayDo
	Distinct(cols ...field.Expr) IQrMsgOfDayDo
	Omit(cols ...field.Expr) IQrMsgOfDayDo
	Join(table schema.Tabler, on ...field.Expr) IQrMsgOfDayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrMsgOfDayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrMsgOfDayDo
	Group(cols ...field.Expr) IQrMsgOfDayDo
	Having(conds ...gen.Condition) IQrMsgOfDayDo
	Limit(limit int) IQrMsgOfDayDo
	Offset(offset int) IQrMsgOfDayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrMsgOfDayDo
	Unscoped() IQrMsgOfDayDo
	Create(values ...*model.QrMsgOfDay) error
	CreateInBatches(values []*model.QrMsgOfDay, batchSize int) error
	Save(values ...*model.QrMsgOfDay) error
	First() (*model.QrMsgOfDay, error)
	Take() (*model.QrMsgOfDay, error)
	Last() (*model.QrMsgOfDay, error)
	Find() ([]*model.QrMsgOfDay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrMsgOfDay, err error)
	FindInBatches(result *[]*model.QrMsgOfDay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrMsgOfDay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrMsgOfDayDo
	Assign(attrs ...field.AssignExpr) IQrMsgOfDayDo
	Joins(fields ...field.RelationField) IQrMsgOfDayDo
	Preload(fields ...field.RelationField) IQrMsgOfDayDo
	FirstOrInit() (*model.QrMsgOfDay, error)
	FirstOrCreate() (*model.QrMsgOfDay, error)
	FindByPage(offset int, limit int) (result []*model.QrMsgOfDay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrMsgOfDayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrMsgOfDayDo) Debug() IQrMsgOfDayDo {
	return q.withDO(q.DO.Debug())
}

func (q qrMsgOfDayDo) WithContext(ctx context.Context) IQrMsgOfDayDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrMsgOfDayDo) ReadDB() IQrMsgOfDayDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrMsgOfDayDo) WriteDB() IQrMsgOfDayDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrMsgOfDayDo) Session(config *gorm.Session) IQrMsgOfDayDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrMsgOfDayDo) Clauses(conds ...clause.Expression) IQrMsgOfDayDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrMsgOfDayDo) Returning(value interface{}, columns ...string) IQrMsgOfDayDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrMsgOfDayDo) Not(conds ...gen.Condition) IQrMsgOfDayDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrMsgOfDayDo) Or(conds ...gen.Condition) IQrMsgOfDayDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrMsgOfDayDo) Select(conds ...field.Expr) IQrMsgOfDayDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrMsgOfDayDo) Where(conds ...gen.Condition) IQrMsgOfDayDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrMsgOfDayDo) Order(conds ...field.Expr) IQrMsgOfDayDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrMsgOfDayDo) Distinct(cols ...field.Expr) IQrMsgOfDayDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrMsgOfDayDo) Omit(cols ...field.Expr) IQrMsgOfDayDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrMsgOfDayDo) Join(table schema.Tabler, on ...field.Expr) IQrMsgOfDayDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrMsgOfDayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrMsgOfDayDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrMsgOfDayDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrMsgOfDayDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrMsgOfDayDo) Group(cols ...field.Expr) IQrMsgOfDayDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrMsgOfDayDo) Having(conds ...gen.Condition) IQrMsgOfDayDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrMsgOfDayDo) Limit(limit int) IQrMsgOfDayDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrMsgOfDayDo) Offset(offset int) IQrMsgOfDayDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrMsgOfDayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrMsgOfDayDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrMsgOfDayDo) Unscoped() IQrMsgOfDayDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrMsgOfDayDo) Create(values ...*model.QrMsgOfDay) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrMsgOfDayDo) CreateInBatches(values []*model.QrMsgOfDay, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrMsgOfDayDo) Save(values ...*model.QrMsgOfDay) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrMsgOfDayDo) First() (*model.QrMsgOfDay, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrMsgOfDay), nil
	}
}

func (q qrMsgOfDayDo) Take() (*model.QrMsgOfDay, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrMsgOfDay), nil
	}
}

func (q qrMsgOfDayDo) Last() (*model.QrMsgOfDay, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrMsgOfDay), nil
	}
}

func (q qrMsgOfDayDo) Find() ([]*model.QrMsgOfDay, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrMsgOfDay), err
}

func (q qrMsgOfDayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrMsgOfDay, err error) {
	buf := make([]*model.QrMsgOfDay, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrMsgOfDayDo) FindInBatches(result *[]*model.QrMsgOfDay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrMsgOfDayDo) Attrs(attrs ...field.AssignExpr) IQrMsgOfDayDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrMsgOfDayDo) Assign(attrs ...field.AssignExpr) IQrMsgOfDayDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrMsgOfDayDo) Joins(fields ...field.RelationField) IQrMsgOfDayDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrMsgOfDayDo) Preload(fields ...field.RelationField) IQrMsgOfDayDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrMsgOfDayDo) FirstOrInit() (*model.QrMsgOfDay, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrMsgOfDay), nil
	}
}

func (q qrMsgOfDayDo) FirstOrCreate() (*model.QrMsgOfDay, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrMsgOfDay), nil
	}
}

func (q qrMsgOfDayDo) FindByPage(offset int, limit int) (result []*model.QrMsgOfDay, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrMsgOfDayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrMsgOfDayDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrMsgOfDayDo) Delete(models ...*model.QrMsgOfDay) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrMsgOfDayDo) withDO(do gen.Dao) *qrMsgOfDayDo {
	q.DO = *do.(*gen.DO)
	return q
}
