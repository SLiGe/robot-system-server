// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"robot-system-server/internal/model"
)

func newQrChineseBqb(db *gorm.DB, opts ...gen.DOOption) qrChineseBqb {
	_qrChineseBqb := qrChineseBqb{}

	_qrChineseBqb.qrChineseBqbDo.UseDB(db, opts...)
	_qrChineseBqb.qrChineseBqbDo.UseModel(&model.QrChineseBqb{})

	tableName := _qrChineseBqb.qrChineseBqbDo.TableName()
	_qrChineseBqb.ALL = field.NewAsterisk(tableName)
	_qrChineseBqb.ID = field.NewInt64(tableName, "id")
	_qrChineseBqb.ImgName = field.NewString(tableName, "img_name")
	_qrChineseBqb.ImgSize = field.NewInt64(tableName, "img_size")
	_qrChineseBqb.ImgKeyword = field.NewString(tableName, "img_keyword")
	_qrChineseBqb.ImgClass = field.NewString(tableName, "img_class")
	_qrChineseBqb.ImgURL = field.NewString(tableName, "img_url")
	_qrChineseBqb.Md5 = field.NewString(tableName, "md5")
	_qrChineseBqb.CreateBy = field.NewString(tableName, "create_by")
	_qrChineseBqb.CreateTime = field.NewField(tableName, "create_time")
	_qrChineseBqb.UpdateBy = field.NewString(tableName, "update_by")
	_qrChineseBqb.UpdateTime = field.NewField(tableName, "update_time")
	_qrChineseBqb.DelFlag = field.NewField(tableName, "del_flag")

	_qrChineseBqb.fillFieldMap()

	return _qrChineseBqb
}

// qrChineseBqb 表情包
type qrChineseBqb struct {
	qrChineseBqbDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	ImgName    field.String // 图片名称
	ImgSize    field.Int64  // 图片大小
	ImgKeyword field.String // 关键词
	ImgClass   field.String // 图片分类
	ImgURL     field.String // 图片地址
	Md5        field.String // MD5
	CreateBy   field.String // 创建人
	CreateTime field.Field  // 创建时间
	UpdateBy   field.String // 更新人
	UpdateTime field.Field  // 更新时间
	DelFlag    field.Field  // 删除标识;0否1是

	fieldMap map[string]field.Expr
}

func (q qrChineseBqb) Table(newTableName string) *qrChineseBqb {
	q.qrChineseBqbDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrChineseBqb) As(alias string) *qrChineseBqb {
	q.qrChineseBqbDo.DO = *(q.qrChineseBqbDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrChineseBqb) updateTableName(table string) *qrChineseBqb {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.ImgName = field.NewString(table, "img_name")
	q.ImgSize = field.NewInt64(table, "img_size")
	q.ImgKeyword = field.NewString(table, "img_keyword")
	q.ImgClass = field.NewString(table, "img_class")
	q.ImgURL = field.NewString(table, "img_url")
	q.Md5 = field.NewString(table, "md5")
	q.CreateBy = field.NewString(table, "create_by")
	q.CreateTime = field.NewField(table, "create_time")
	q.UpdateBy = field.NewString(table, "update_by")
	q.UpdateTime = field.NewField(table, "update_time")
	q.DelFlag = field.NewField(table, "del_flag")

	q.fillFieldMap()

	return q
}

func (q *qrChineseBqb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrChineseBqb) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 12)
	q.fieldMap["id"] = q.ID
	q.fieldMap["img_name"] = q.ImgName
	q.fieldMap["img_size"] = q.ImgSize
	q.fieldMap["img_keyword"] = q.ImgKeyword
	q.fieldMap["img_class"] = q.ImgClass
	q.fieldMap["img_url"] = q.ImgURL
	q.fieldMap["md5"] = q.Md5
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_by"] = q.UpdateBy
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["del_flag"] = q.DelFlag
}

func (q qrChineseBqb) clone(db *gorm.DB) qrChineseBqb {
	q.qrChineseBqbDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrChineseBqb) replaceDB(db *gorm.DB) qrChineseBqb {
	q.qrChineseBqbDo.ReplaceDB(db)
	return q
}

type qrChineseBqbDo struct{ gen.DO }

type IQrChineseBqbDo interface {
	gen.SubQuery
	Debug() IQrChineseBqbDo
	WithContext(ctx context.Context) IQrChineseBqbDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrChineseBqbDo
	WriteDB() IQrChineseBqbDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrChineseBqbDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrChineseBqbDo
	Not(conds ...gen.Condition) IQrChineseBqbDo
	Or(conds ...gen.Condition) IQrChineseBqbDo
	Select(conds ...field.Expr) IQrChineseBqbDo
	Where(conds ...gen.Condition) IQrChineseBqbDo
	Order(conds ...field.Expr) IQrChineseBqbDo
	Distinct(cols ...field.Expr) IQrChineseBqbDo
	Omit(cols ...field.Expr) IQrChineseBqbDo
	Join(table schema.Tabler, on ...field.Expr) IQrChineseBqbDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrChineseBqbDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrChineseBqbDo
	Group(cols ...field.Expr) IQrChineseBqbDo
	Having(conds ...gen.Condition) IQrChineseBqbDo
	Limit(limit int) IQrChineseBqbDo
	Offset(offset int) IQrChineseBqbDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrChineseBqbDo
	Unscoped() IQrChineseBqbDo
	Create(values ...*model.QrChineseBqb) error
	CreateInBatches(values []*model.QrChineseBqb, batchSize int) error
	Save(values ...*model.QrChineseBqb) error
	First() (*model.QrChineseBqb, error)
	Take() (*model.QrChineseBqb, error)
	Last() (*model.QrChineseBqb, error)
	Find() ([]*model.QrChineseBqb, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrChineseBqb, err error)
	FindInBatches(result *[]*model.QrChineseBqb, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrChineseBqb) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrChineseBqbDo
	Assign(attrs ...field.AssignExpr) IQrChineseBqbDo
	Joins(fields ...field.RelationField) IQrChineseBqbDo
	Preload(fields ...field.RelationField) IQrChineseBqbDo
	FirstOrInit() (*model.QrChineseBqb, error)
	FirstOrCreate() (*model.QrChineseBqb, error)
	FindByPage(offset int, limit int) (result []*model.QrChineseBqb, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrChineseBqbDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrChineseBqbDo) Debug() IQrChineseBqbDo {
	return q.withDO(q.DO.Debug())
}

func (q qrChineseBqbDo) WithContext(ctx context.Context) IQrChineseBqbDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrChineseBqbDo) ReadDB() IQrChineseBqbDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrChineseBqbDo) WriteDB() IQrChineseBqbDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrChineseBqbDo) Session(config *gorm.Session) IQrChineseBqbDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrChineseBqbDo) Clauses(conds ...clause.Expression) IQrChineseBqbDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrChineseBqbDo) Returning(value interface{}, columns ...string) IQrChineseBqbDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrChineseBqbDo) Not(conds ...gen.Condition) IQrChineseBqbDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrChineseBqbDo) Or(conds ...gen.Condition) IQrChineseBqbDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrChineseBqbDo) Select(conds ...field.Expr) IQrChineseBqbDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrChineseBqbDo) Where(conds ...gen.Condition) IQrChineseBqbDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrChineseBqbDo) Order(conds ...field.Expr) IQrChineseBqbDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrChineseBqbDo) Distinct(cols ...field.Expr) IQrChineseBqbDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrChineseBqbDo) Omit(cols ...field.Expr) IQrChineseBqbDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrChineseBqbDo) Join(table schema.Tabler, on ...field.Expr) IQrChineseBqbDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrChineseBqbDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrChineseBqbDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrChineseBqbDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrChineseBqbDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrChineseBqbDo) Group(cols ...field.Expr) IQrChineseBqbDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrChineseBqbDo) Having(conds ...gen.Condition) IQrChineseBqbDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrChineseBqbDo) Limit(limit int) IQrChineseBqbDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrChineseBqbDo) Offset(offset int) IQrChineseBqbDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrChineseBqbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrChineseBqbDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrChineseBqbDo) Unscoped() IQrChineseBqbDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrChineseBqbDo) Create(values ...*model.QrChineseBqb) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrChineseBqbDo) CreateInBatches(values []*model.QrChineseBqb, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrChineseBqbDo) Save(values ...*model.QrChineseBqb) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrChineseBqbDo) First() (*model.QrChineseBqb, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrChineseBqb), nil
	}
}

func (q qrChineseBqbDo) Take() (*model.QrChineseBqb, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrChineseBqb), nil
	}
}

func (q qrChineseBqbDo) Last() (*model.QrChineseBqb, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrChineseBqb), nil
	}
}

func (q qrChineseBqbDo) Find() ([]*model.QrChineseBqb, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrChineseBqb), err
}

func (q qrChineseBqbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrChineseBqb, err error) {
	buf := make([]*model.QrChineseBqb, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrChineseBqbDo) FindInBatches(result *[]*model.QrChineseBqb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrChineseBqbDo) Attrs(attrs ...field.AssignExpr) IQrChineseBqbDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrChineseBqbDo) Assign(attrs ...field.AssignExpr) IQrChineseBqbDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrChineseBqbDo) Joins(fields ...field.RelationField) IQrChineseBqbDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrChineseBqbDo) Preload(fields ...field.RelationField) IQrChineseBqbDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrChineseBqbDo) FirstOrInit() (*model.QrChineseBqb, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrChineseBqb), nil
	}
}

func (q qrChineseBqbDo) FirstOrCreate() (*model.QrChineseBqb, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrChineseBqb), nil
	}
}

func (q qrChineseBqbDo) FindByPage(offset int, limit int) (result []*model.QrChineseBqb, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrChineseBqbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrChineseBqbDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrChineseBqbDo) Delete(models ...*model.QrChineseBqb) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrChineseBqbDo) withDO(do gen.Dao) *qrChineseBqbDo {
	q.DO = *do.(*gen.DO)
	return q
}
