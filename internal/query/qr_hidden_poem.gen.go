// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"robot-system-server/internal/model"
)

func newQrHiddenPoem(db *gorm.DB, opts ...gen.DOOption) qrHiddenPoem {
	_qrHiddenPoem := qrHiddenPoem{}

	_qrHiddenPoem.qrHiddenPoemDo.UseDB(db, opts...)
	_qrHiddenPoem.qrHiddenPoemDo.UseModel(&model.QrHiddenPoem{})

	tableName := _qrHiddenPoem.qrHiddenPoemDo.TableName()
	_qrHiddenPoem.ALL = field.NewAsterisk(tableName)
	_qrHiddenPoem.ID = field.NewInt64(tableName, "id")
	_qrHiddenPoem.Poem = field.NewString(tableName, "poem")
	_qrHiddenPoem.PoemKeyword = field.NewString(tableName, "poem_keyword")
	_qrHiddenPoem.PoemNum = field.NewInt32(tableName, "poem_num")
	_qrHiddenPoem.PoemType = field.NewInt32(tableName, "poem_type")
	_qrHiddenPoem.PoemRhyme = field.NewInt32(tableName, "poem_rhyme")
	_qrHiddenPoem.CreateBy = field.NewString(tableName, "create_by")
	_qrHiddenPoem.CreateTime = field.NewField(tableName, "create_time")
	_qrHiddenPoem.UpdateBy = field.NewString(tableName, "update_by")
	_qrHiddenPoem.UpdateTime = field.NewField(tableName, "update_time")
	_qrHiddenPoem.DelFlag = field.NewField(tableName, "del_flag")

	_qrHiddenPoem.fillFieldMap()

	return _qrHiddenPoem
}

// qrHiddenPoem 藏头诗
type qrHiddenPoem struct {
	qrHiddenPoemDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	Poem        field.String // 诗句内容
	PoemKeyword field.String // 藏头诗关键字
	PoemNum     field.Int32  // 诗句格式;5五言诗[默认]、7七言诗
	PoemType    field.Int32  // 藏头位置;1藏头[默认]、2藏尾、3藏中、4递增、5递减
	PoemRhyme   field.Int32  // 押韵类型;1双句一压[默认]、2双句押韵、3一三四押
	CreateBy    field.String // 创建人
	CreateTime  field.Field  // 创建时间
	UpdateBy    field.String // 更新人
	UpdateTime  field.Field  // 更新时间
	DelFlag     field.Field  // 删除标识;0否1是

	fieldMap map[string]field.Expr
}

func (q qrHiddenPoem) Table(newTableName string) *qrHiddenPoem {
	q.qrHiddenPoemDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrHiddenPoem) As(alias string) *qrHiddenPoem {
	q.qrHiddenPoemDo.DO = *(q.qrHiddenPoemDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrHiddenPoem) updateTableName(table string) *qrHiddenPoem {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Poem = field.NewString(table, "poem")
	q.PoemKeyword = field.NewString(table, "poem_keyword")
	q.PoemNum = field.NewInt32(table, "poem_num")
	q.PoemType = field.NewInt32(table, "poem_type")
	q.PoemRhyme = field.NewInt32(table, "poem_rhyme")
	q.CreateBy = field.NewString(table, "create_by")
	q.CreateTime = field.NewField(table, "create_time")
	q.UpdateBy = field.NewString(table, "update_by")
	q.UpdateTime = field.NewField(table, "update_time")
	q.DelFlag = field.NewField(table, "del_flag")

	q.fillFieldMap()

	return q
}

func (q *qrHiddenPoem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrHiddenPoem) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 11)
	q.fieldMap["id"] = q.ID
	q.fieldMap["poem"] = q.Poem
	q.fieldMap["poem_keyword"] = q.PoemKeyword
	q.fieldMap["poem_num"] = q.PoemNum
	q.fieldMap["poem_type"] = q.PoemType
	q.fieldMap["poem_rhyme"] = q.PoemRhyme
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_by"] = q.UpdateBy
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["del_flag"] = q.DelFlag
}

func (q qrHiddenPoem) clone(db *gorm.DB) qrHiddenPoem {
	q.qrHiddenPoemDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrHiddenPoem) replaceDB(db *gorm.DB) qrHiddenPoem {
	q.qrHiddenPoemDo.ReplaceDB(db)
	return q
}

type qrHiddenPoemDo struct{ gen.DO }

type IQrHiddenPoemDo interface {
	gen.SubQuery
	Debug() IQrHiddenPoemDo
	WithContext(ctx context.Context) IQrHiddenPoemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrHiddenPoemDo
	WriteDB() IQrHiddenPoemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrHiddenPoemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrHiddenPoemDo
	Not(conds ...gen.Condition) IQrHiddenPoemDo
	Or(conds ...gen.Condition) IQrHiddenPoemDo
	Select(conds ...field.Expr) IQrHiddenPoemDo
	Where(conds ...gen.Condition) IQrHiddenPoemDo
	Order(conds ...field.Expr) IQrHiddenPoemDo
	Distinct(cols ...field.Expr) IQrHiddenPoemDo
	Omit(cols ...field.Expr) IQrHiddenPoemDo
	Join(table schema.Tabler, on ...field.Expr) IQrHiddenPoemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrHiddenPoemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrHiddenPoemDo
	Group(cols ...field.Expr) IQrHiddenPoemDo
	Having(conds ...gen.Condition) IQrHiddenPoemDo
	Limit(limit int) IQrHiddenPoemDo
	Offset(offset int) IQrHiddenPoemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrHiddenPoemDo
	Unscoped() IQrHiddenPoemDo
	Create(values ...*model.QrHiddenPoem) error
	CreateInBatches(values []*model.QrHiddenPoem, batchSize int) error
	Save(values ...*model.QrHiddenPoem) error
	First() (*model.QrHiddenPoem, error)
	Take() (*model.QrHiddenPoem, error)
	Last() (*model.QrHiddenPoem, error)
	Find() ([]*model.QrHiddenPoem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrHiddenPoem, err error)
	FindInBatches(result *[]*model.QrHiddenPoem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrHiddenPoem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrHiddenPoemDo
	Assign(attrs ...field.AssignExpr) IQrHiddenPoemDo
	Joins(fields ...field.RelationField) IQrHiddenPoemDo
	Preload(fields ...field.RelationField) IQrHiddenPoemDo
	FirstOrInit() (*model.QrHiddenPoem, error)
	FirstOrCreate() (*model.QrHiddenPoem, error)
	FindByPage(offset int, limit int) (result []*model.QrHiddenPoem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrHiddenPoemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrHiddenPoemDo) Debug() IQrHiddenPoemDo {
	return q.withDO(q.DO.Debug())
}

func (q qrHiddenPoemDo) WithContext(ctx context.Context) IQrHiddenPoemDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrHiddenPoemDo) ReadDB() IQrHiddenPoemDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrHiddenPoemDo) WriteDB() IQrHiddenPoemDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrHiddenPoemDo) Session(config *gorm.Session) IQrHiddenPoemDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrHiddenPoemDo) Clauses(conds ...clause.Expression) IQrHiddenPoemDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrHiddenPoemDo) Returning(value interface{}, columns ...string) IQrHiddenPoemDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrHiddenPoemDo) Not(conds ...gen.Condition) IQrHiddenPoemDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrHiddenPoemDo) Or(conds ...gen.Condition) IQrHiddenPoemDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrHiddenPoemDo) Select(conds ...field.Expr) IQrHiddenPoemDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrHiddenPoemDo) Where(conds ...gen.Condition) IQrHiddenPoemDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrHiddenPoemDo) Order(conds ...field.Expr) IQrHiddenPoemDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrHiddenPoemDo) Distinct(cols ...field.Expr) IQrHiddenPoemDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrHiddenPoemDo) Omit(cols ...field.Expr) IQrHiddenPoemDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrHiddenPoemDo) Join(table schema.Tabler, on ...field.Expr) IQrHiddenPoemDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrHiddenPoemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrHiddenPoemDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrHiddenPoemDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrHiddenPoemDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrHiddenPoemDo) Group(cols ...field.Expr) IQrHiddenPoemDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrHiddenPoemDo) Having(conds ...gen.Condition) IQrHiddenPoemDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrHiddenPoemDo) Limit(limit int) IQrHiddenPoemDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrHiddenPoemDo) Offset(offset int) IQrHiddenPoemDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrHiddenPoemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrHiddenPoemDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrHiddenPoemDo) Unscoped() IQrHiddenPoemDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrHiddenPoemDo) Create(values ...*model.QrHiddenPoem) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrHiddenPoemDo) CreateInBatches(values []*model.QrHiddenPoem, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrHiddenPoemDo) Save(values ...*model.QrHiddenPoem) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrHiddenPoemDo) First() (*model.QrHiddenPoem, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrHiddenPoem), nil
	}
}

func (q qrHiddenPoemDo) Take() (*model.QrHiddenPoem, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrHiddenPoem), nil
	}
}

func (q qrHiddenPoemDo) Last() (*model.QrHiddenPoem, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrHiddenPoem), nil
	}
}

func (q qrHiddenPoemDo) Find() ([]*model.QrHiddenPoem, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrHiddenPoem), err
}

func (q qrHiddenPoemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrHiddenPoem, err error) {
	buf := make([]*model.QrHiddenPoem, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrHiddenPoemDo) FindInBatches(result *[]*model.QrHiddenPoem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrHiddenPoemDo) Attrs(attrs ...field.AssignExpr) IQrHiddenPoemDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrHiddenPoemDo) Assign(attrs ...field.AssignExpr) IQrHiddenPoemDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrHiddenPoemDo) Joins(fields ...field.RelationField) IQrHiddenPoemDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrHiddenPoemDo) Preload(fields ...field.RelationField) IQrHiddenPoemDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrHiddenPoemDo) FirstOrInit() (*model.QrHiddenPoem, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrHiddenPoem), nil
	}
}

func (q qrHiddenPoemDo) FirstOrCreate() (*model.QrHiddenPoem, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrHiddenPoem), nil
	}
}

func (q qrHiddenPoemDo) FindByPage(offset int, limit int) (result []*model.QrHiddenPoem, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrHiddenPoemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrHiddenPoemDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrHiddenPoemDo) Delete(models ...*model.QrHiddenPoem) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrHiddenPoemDo) withDO(do gen.Dao) *qrHiddenPoemDo {
	q.DO = *do.(*gen.DO)
	return q
}
