// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"robot-system-server/internal/model"
)

func newQrUserAsset(db *gorm.DB, opts ...gen.DOOption) qrUserAsset {
	_qrUserAsset := qrUserAsset{}

	_qrUserAsset.qrUserAssetDo.UseDB(db, opts...)
	_qrUserAsset.qrUserAssetDo.UseModel(&model.QrUserAsset{})

	tableName := _qrUserAsset.qrUserAssetDo.TableName()
	_qrUserAsset.ALL = field.NewAsterisk(tableName)
	_qrUserAsset.ID = field.NewInt64(tableName, "id")
	_qrUserAsset.UserID = field.NewInt64(tableName, "user_id")
	_qrUserAsset.UserAccount = field.NewString(tableName, "user_account")
	_qrUserAsset.Points = field.NewFloat64(tableName, "points")
	_qrUserAsset.CreateBy = field.NewString(tableName, "create_by")
	_qrUserAsset.CreateTime = field.NewField(tableName, "create_time")
	_qrUserAsset.UpdateBy = field.NewString(tableName, "update_by")
	_qrUserAsset.UpdateTime = field.NewTime(tableName, "update_time")
	_qrUserAsset.DelFlag = field.NewField(tableName, "del_flag")

	_qrUserAsset.fillFieldMap()

	return _qrUserAsset
}

// qrUserAsset 用户资产
type qrUserAsset struct {
	qrUserAssetDo

	ALL         field.Asterisk
	ID          field.Int64   // 主键
	UserID      field.Int64   // 用户ID
	UserAccount field.String  // 用户账号
	Points      field.Float64 // 积分
	CreateBy    field.String  // 创建人
	CreateTime  field.Field   // 创建时间
	UpdateBy    field.String  // 更新人
	UpdateTime  field.Time    // 更新时间
	DelFlag     field.Field   // 删除标识;0否1是

	fieldMap map[string]field.Expr
}

func (q qrUserAsset) Table(newTableName string) *qrUserAsset {
	q.qrUserAssetDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrUserAsset) As(alias string) *qrUserAsset {
	q.qrUserAssetDo.DO = *(q.qrUserAssetDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrUserAsset) updateTableName(table string) *qrUserAsset {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.UserID = field.NewInt64(table, "user_id")
	q.UserAccount = field.NewString(table, "user_account")
	q.Points = field.NewFloat64(table, "points")
	q.CreateBy = field.NewString(table, "create_by")
	q.CreateTime = field.NewField(table, "create_time")
	q.UpdateBy = field.NewString(table, "update_by")
	q.UpdateTime = field.NewTime(table, "update_time")
	q.DelFlag = field.NewField(table, "del_flag")

	q.fillFieldMap()

	return q
}

func (q *qrUserAsset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrUserAsset) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 9)
	q.fieldMap["id"] = q.ID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["user_account"] = q.UserAccount
	q.fieldMap["points"] = q.Points
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_by"] = q.UpdateBy
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["del_flag"] = q.DelFlag
}

func (q qrUserAsset) clone(db *gorm.DB) qrUserAsset {
	q.qrUserAssetDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrUserAsset) replaceDB(db *gorm.DB) qrUserAsset {
	q.qrUserAssetDo.ReplaceDB(db)
	return q
}

type qrUserAssetDo struct{ gen.DO }

type IQrUserAssetDo interface {
	gen.SubQuery
	Debug() IQrUserAssetDo
	WithContext(ctx context.Context) IQrUserAssetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrUserAssetDo
	WriteDB() IQrUserAssetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrUserAssetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrUserAssetDo
	Not(conds ...gen.Condition) IQrUserAssetDo
	Or(conds ...gen.Condition) IQrUserAssetDo
	Select(conds ...field.Expr) IQrUserAssetDo
	Where(conds ...gen.Condition) IQrUserAssetDo
	Order(conds ...field.Expr) IQrUserAssetDo
	Distinct(cols ...field.Expr) IQrUserAssetDo
	Omit(cols ...field.Expr) IQrUserAssetDo
	Join(table schema.Tabler, on ...field.Expr) IQrUserAssetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrUserAssetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrUserAssetDo
	Group(cols ...field.Expr) IQrUserAssetDo
	Having(conds ...gen.Condition) IQrUserAssetDo
	Limit(limit int) IQrUserAssetDo
	Offset(offset int) IQrUserAssetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrUserAssetDo
	Unscoped() IQrUserAssetDo
	Create(values ...*model.QrUserAsset) error
	CreateInBatches(values []*model.QrUserAsset, batchSize int) error
	Save(values ...*model.QrUserAsset) error
	First() (*model.QrUserAsset, error)
	Take() (*model.QrUserAsset, error)
	Last() (*model.QrUserAsset, error)
	Find() ([]*model.QrUserAsset, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrUserAsset, err error)
	FindInBatches(result *[]*model.QrUserAsset, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrUserAsset) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrUserAssetDo
	Assign(attrs ...field.AssignExpr) IQrUserAssetDo
	Joins(fields ...field.RelationField) IQrUserAssetDo
	Preload(fields ...field.RelationField) IQrUserAssetDo
	FirstOrInit() (*model.QrUserAsset, error)
	FirstOrCreate() (*model.QrUserAsset, error)
	FindByPage(offset int, limit int) (result []*model.QrUserAsset, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrUserAssetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrUserAssetDo) Debug() IQrUserAssetDo {
	return q.withDO(q.DO.Debug())
}

func (q qrUserAssetDo) WithContext(ctx context.Context) IQrUserAssetDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrUserAssetDo) ReadDB() IQrUserAssetDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrUserAssetDo) WriteDB() IQrUserAssetDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrUserAssetDo) Session(config *gorm.Session) IQrUserAssetDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrUserAssetDo) Clauses(conds ...clause.Expression) IQrUserAssetDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrUserAssetDo) Returning(value interface{}, columns ...string) IQrUserAssetDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrUserAssetDo) Not(conds ...gen.Condition) IQrUserAssetDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrUserAssetDo) Or(conds ...gen.Condition) IQrUserAssetDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrUserAssetDo) Select(conds ...field.Expr) IQrUserAssetDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrUserAssetDo) Where(conds ...gen.Condition) IQrUserAssetDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrUserAssetDo) Order(conds ...field.Expr) IQrUserAssetDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrUserAssetDo) Distinct(cols ...field.Expr) IQrUserAssetDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrUserAssetDo) Omit(cols ...field.Expr) IQrUserAssetDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrUserAssetDo) Join(table schema.Tabler, on ...field.Expr) IQrUserAssetDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrUserAssetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrUserAssetDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrUserAssetDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrUserAssetDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrUserAssetDo) Group(cols ...field.Expr) IQrUserAssetDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrUserAssetDo) Having(conds ...gen.Condition) IQrUserAssetDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrUserAssetDo) Limit(limit int) IQrUserAssetDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrUserAssetDo) Offset(offset int) IQrUserAssetDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrUserAssetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrUserAssetDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrUserAssetDo) Unscoped() IQrUserAssetDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrUserAssetDo) Create(values ...*model.QrUserAsset) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrUserAssetDo) CreateInBatches(values []*model.QrUserAsset, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrUserAssetDo) Save(values ...*model.QrUserAsset) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrUserAssetDo) First() (*model.QrUserAsset, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUserAsset), nil
	}
}

func (q qrUserAssetDo) Take() (*model.QrUserAsset, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUserAsset), nil
	}
}

func (q qrUserAssetDo) Last() (*model.QrUserAsset, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUserAsset), nil
	}
}

func (q qrUserAssetDo) Find() ([]*model.QrUserAsset, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrUserAsset), err
}

func (q qrUserAssetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrUserAsset, err error) {
	buf := make([]*model.QrUserAsset, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrUserAssetDo) FindInBatches(result *[]*model.QrUserAsset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrUserAssetDo) Attrs(attrs ...field.AssignExpr) IQrUserAssetDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrUserAssetDo) Assign(attrs ...field.AssignExpr) IQrUserAssetDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrUserAssetDo) Joins(fields ...field.RelationField) IQrUserAssetDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrUserAssetDo) Preload(fields ...field.RelationField) IQrUserAssetDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrUserAssetDo) FirstOrInit() (*model.QrUserAsset, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUserAsset), nil
	}
}

func (q qrUserAssetDo) FirstOrCreate() (*model.QrUserAsset, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUserAsset), nil
	}
}

func (q qrUserAssetDo) FindByPage(offset int, limit int) (result []*model.QrUserAsset, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrUserAssetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrUserAssetDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrUserAssetDo) Delete(models ...*model.QrUserAsset) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrUserAssetDo) withDO(do gen.Dao) *qrUserAssetDo {
	q.DO = *do.(*gen.DO)
	return q
}
