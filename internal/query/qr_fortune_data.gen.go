// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"robot-system-server/internal/model"
)

func newQrFortuneDatum(db *gorm.DB, opts ...gen.DOOption) qrFortuneDatum {
	_qrFortuneDatum := qrFortuneDatum{}

	_qrFortuneDatum.qrFortuneDatumDo.UseDB(db, opts...)
	_qrFortuneDatum.qrFortuneDatumDo.UseModel(&model.QrFortuneDatum{})

	tableName := _qrFortuneDatum.qrFortuneDatumDo.TableName()
	_qrFortuneDatum.ALL = field.NewAsterisk(tableName)
	_qrFortuneDatum.ID = field.NewInt64(tableName, "id")
	_qrFortuneDatum.Qq = field.NewString(tableName, "qq")
	_qrFortuneDatum.JSONData = field.NewString(tableName, "json_data")
	_qrFortuneDatum.GroupNum = field.NewString(tableName, "group_num")
	_qrFortuneDatum.FortuneDate = field.NewTime(tableName, "fortune_date")
	_qrFortuneDatum.UpdateDate = field.NewTime(tableName, "update_date")
	_qrFortuneDatum.CreateDate = field.NewTime(tableName, "create_date")

	_qrFortuneDatum.fillFieldMap()

	return _qrFortuneDatum
}

// qrFortuneDatum 今日运势数据储存
type qrFortuneDatum struct {
	qrFortuneDatumDo

	ALL         field.Asterisk
	ID          field.Int64
	Qq          field.String // QQ号
	JSONData    field.String // JSON数据
	GroupNum    field.String // 群号列表
	FortuneDate field.Time   // 签到时间
	UpdateDate  field.Time   // 修改日期
	CreateDate  field.Time   // 创建日期

	fieldMap map[string]field.Expr
}

func (q qrFortuneDatum) Table(newTableName string) *qrFortuneDatum {
	q.qrFortuneDatumDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrFortuneDatum) As(alias string) *qrFortuneDatum {
	q.qrFortuneDatumDo.DO = *(q.qrFortuneDatumDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrFortuneDatum) updateTableName(table string) *qrFortuneDatum {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Qq = field.NewString(table, "qq")
	q.JSONData = field.NewString(table, "json_data")
	q.GroupNum = field.NewString(table, "group_num")
	q.FortuneDate = field.NewTime(table, "fortune_date")
	q.UpdateDate = field.NewTime(table, "update_date")
	q.CreateDate = field.NewTime(table, "create_date")

	q.fillFieldMap()

	return q
}

func (q *qrFortuneDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrFortuneDatum) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["qq"] = q.Qq
	q.fieldMap["json_data"] = q.JSONData
	q.fieldMap["group_num"] = q.GroupNum
	q.fieldMap["fortune_date"] = q.FortuneDate
	q.fieldMap["update_date"] = q.UpdateDate
	q.fieldMap["create_date"] = q.CreateDate
}

func (q qrFortuneDatum) clone(db *gorm.DB) qrFortuneDatum {
	q.qrFortuneDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrFortuneDatum) replaceDB(db *gorm.DB) qrFortuneDatum {
	q.qrFortuneDatumDo.ReplaceDB(db)
	return q
}

type qrFortuneDatumDo struct{ gen.DO }

type IQrFortuneDatumDo interface {
	gen.SubQuery
	Debug() IQrFortuneDatumDo
	WithContext(ctx context.Context) IQrFortuneDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrFortuneDatumDo
	WriteDB() IQrFortuneDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrFortuneDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrFortuneDatumDo
	Not(conds ...gen.Condition) IQrFortuneDatumDo
	Or(conds ...gen.Condition) IQrFortuneDatumDo
	Select(conds ...field.Expr) IQrFortuneDatumDo
	Where(conds ...gen.Condition) IQrFortuneDatumDo
	Order(conds ...field.Expr) IQrFortuneDatumDo
	Distinct(cols ...field.Expr) IQrFortuneDatumDo
	Omit(cols ...field.Expr) IQrFortuneDatumDo
	Join(table schema.Tabler, on ...field.Expr) IQrFortuneDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrFortuneDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrFortuneDatumDo
	Group(cols ...field.Expr) IQrFortuneDatumDo
	Having(conds ...gen.Condition) IQrFortuneDatumDo
	Limit(limit int) IQrFortuneDatumDo
	Offset(offset int) IQrFortuneDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrFortuneDatumDo
	Unscoped() IQrFortuneDatumDo
	Create(values ...*model.QrFortuneDatum) error
	CreateInBatches(values []*model.QrFortuneDatum, batchSize int) error
	Save(values ...*model.QrFortuneDatum) error
	First() (*model.QrFortuneDatum, error)
	Take() (*model.QrFortuneDatum, error)
	Last() (*model.QrFortuneDatum, error)
	Find() ([]*model.QrFortuneDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrFortuneDatum, err error)
	FindInBatches(result *[]*model.QrFortuneDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrFortuneDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrFortuneDatumDo
	Assign(attrs ...field.AssignExpr) IQrFortuneDatumDo
	Joins(fields ...field.RelationField) IQrFortuneDatumDo
	Preload(fields ...field.RelationField) IQrFortuneDatumDo
	FirstOrInit() (*model.QrFortuneDatum, error)
	FirstOrCreate() (*model.QrFortuneDatum, error)
	FindByPage(offset int, limit int) (result []*model.QrFortuneDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrFortuneDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrFortuneDatumDo) Debug() IQrFortuneDatumDo {
	return q.withDO(q.DO.Debug())
}

func (q qrFortuneDatumDo) WithContext(ctx context.Context) IQrFortuneDatumDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrFortuneDatumDo) ReadDB() IQrFortuneDatumDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrFortuneDatumDo) WriteDB() IQrFortuneDatumDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrFortuneDatumDo) Session(config *gorm.Session) IQrFortuneDatumDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrFortuneDatumDo) Clauses(conds ...clause.Expression) IQrFortuneDatumDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrFortuneDatumDo) Returning(value interface{}, columns ...string) IQrFortuneDatumDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrFortuneDatumDo) Not(conds ...gen.Condition) IQrFortuneDatumDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrFortuneDatumDo) Or(conds ...gen.Condition) IQrFortuneDatumDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrFortuneDatumDo) Select(conds ...field.Expr) IQrFortuneDatumDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrFortuneDatumDo) Where(conds ...gen.Condition) IQrFortuneDatumDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrFortuneDatumDo) Order(conds ...field.Expr) IQrFortuneDatumDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrFortuneDatumDo) Distinct(cols ...field.Expr) IQrFortuneDatumDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrFortuneDatumDo) Omit(cols ...field.Expr) IQrFortuneDatumDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrFortuneDatumDo) Join(table schema.Tabler, on ...field.Expr) IQrFortuneDatumDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrFortuneDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrFortuneDatumDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrFortuneDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrFortuneDatumDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrFortuneDatumDo) Group(cols ...field.Expr) IQrFortuneDatumDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrFortuneDatumDo) Having(conds ...gen.Condition) IQrFortuneDatumDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrFortuneDatumDo) Limit(limit int) IQrFortuneDatumDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrFortuneDatumDo) Offset(offset int) IQrFortuneDatumDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrFortuneDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrFortuneDatumDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrFortuneDatumDo) Unscoped() IQrFortuneDatumDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrFortuneDatumDo) Create(values ...*model.QrFortuneDatum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrFortuneDatumDo) CreateInBatches(values []*model.QrFortuneDatum, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrFortuneDatumDo) Save(values ...*model.QrFortuneDatum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrFortuneDatumDo) First() (*model.QrFortuneDatum, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrFortuneDatum), nil
	}
}

func (q qrFortuneDatumDo) Take() (*model.QrFortuneDatum, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrFortuneDatum), nil
	}
}

func (q qrFortuneDatumDo) Last() (*model.QrFortuneDatum, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrFortuneDatum), nil
	}
}

func (q qrFortuneDatumDo) Find() ([]*model.QrFortuneDatum, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrFortuneDatum), err
}

func (q qrFortuneDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrFortuneDatum, err error) {
	buf := make([]*model.QrFortuneDatum, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrFortuneDatumDo) FindInBatches(result *[]*model.QrFortuneDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrFortuneDatumDo) Attrs(attrs ...field.AssignExpr) IQrFortuneDatumDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrFortuneDatumDo) Assign(attrs ...field.AssignExpr) IQrFortuneDatumDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrFortuneDatumDo) Joins(fields ...field.RelationField) IQrFortuneDatumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrFortuneDatumDo) Preload(fields ...field.RelationField) IQrFortuneDatumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrFortuneDatumDo) FirstOrInit() (*model.QrFortuneDatum, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrFortuneDatum), nil
	}
}

func (q qrFortuneDatumDo) FirstOrCreate() (*model.QrFortuneDatum, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrFortuneDatum), nil
	}
}

func (q qrFortuneDatumDo) FindByPage(offset int, limit int) (result []*model.QrFortuneDatum, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrFortuneDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrFortuneDatumDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrFortuneDatumDo) Delete(models ...*model.QrFortuneDatum) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrFortuneDatumDo) withDO(do gen.Dao) *qrFortuneDatumDo {
	q.DO = *do.(*gen.DO)
	return q
}
