// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"robot-system-server/internal/model"
)

func newQrSpiritSign(db *gorm.DB, opts ...gen.DOOption) qrSpiritSign {
	_qrSpiritSign := qrSpiritSign{}

	_qrSpiritSign.qrSpiritSignDo.UseDB(db, opts...)
	_qrSpiritSign.qrSpiritSignDo.UseModel(&model.QrSpiritSign{})

	tableName := _qrSpiritSign.qrSpiritSignDo.TableName()
	_qrSpiritSign.ALL = field.NewAsterisk(tableName)
	_qrSpiritSign.ID = field.NewInt64(tableName, "id")
	_qrSpiritSign.DataJSON = field.NewString(tableName, "data_json")
	_qrSpiritSign.DataType = field.NewString(tableName, "data_type")
	_qrSpiritSign.CreateBy = field.NewString(tableName, "create_by")
	_qrSpiritSign.CreateTime = field.NewField(tableName, "create_time")
	_qrSpiritSign.UpdateBy = field.NewString(tableName, "update_by")
	_qrSpiritSign.UpdateTime = field.NewField(tableName, "update_time")
	_qrSpiritSign.DelFlag = field.NewField(tableName, "del_flag")

	_qrSpiritSign.fillFieldMap()

	return _qrSpiritSign
}

// qrSpiritSign 灵签数据
type qrSpiritSign struct {
	qrSpiritSignDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	DataJSON   field.String // 灵签json数据
	DataType   field.String // 灵签类型
	CreateBy   field.String // 创建人
	CreateTime field.Field  // 创建时间
	UpdateBy   field.String // 更新人
	UpdateTime field.Field  // 更新时间
	DelFlag    field.Field  // 删除标识

	fieldMap map[string]field.Expr
}

func (q qrSpiritSign) Table(newTableName string) *qrSpiritSign {
	q.qrSpiritSignDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrSpiritSign) As(alias string) *qrSpiritSign {
	q.qrSpiritSignDo.DO = *(q.qrSpiritSignDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrSpiritSign) updateTableName(table string) *qrSpiritSign {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.DataJSON = field.NewString(table, "data_json")
	q.DataType = field.NewString(table, "data_type")
	q.CreateBy = field.NewString(table, "create_by")
	q.CreateTime = field.NewField(table, "create_time")
	q.UpdateBy = field.NewString(table, "update_by")
	q.UpdateTime = field.NewField(table, "update_time")
	q.DelFlag = field.NewField(table, "del_flag")

	q.fillFieldMap()

	return q
}

func (q *qrSpiritSign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrSpiritSign) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 8)
	q.fieldMap["id"] = q.ID
	q.fieldMap["data_json"] = q.DataJSON
	q.fieldMap["data_type"] = q.DataType
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_by"] = q.UpdateBy
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["del_flag"] = q.DelFlag
}

func (q qrSpiritSign) clone(db *gorm.DB) qrSpiritSign {
	q.qrSpiritSignDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrSpiritSign) replaceDB(db *gorm.DB) qrSpiritSign {
	q.qrSpiritSignDo.ReplaceDB(db)
	return q
}

type qrSpiritSignDo struct{ gen.DO }

type IQrSpiritSignDo interface {
	gen.SubQuery
	Debug() IQrSpiritSignDo
	WithContext(ctx context.Context) IQrSpiritSignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrSpiritSignDo
	WriteDB() IQrSpiritSignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrSpiritSignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrSpiritSignDo
	Not(conds ...gen.Condition) IQrSpiritSignDo
	Or(conds ...gen.Condition) IQrSpiritSignDo
	Select(conds ...field.Expr) IQrSpiritSignDo
	Where(conds ...gen.Condition) IQrSpiritSignDo
	Order(conds ...field.Expr) IQrSpiritSignDo
	Distinct(cols ...field.Expr) IQrSpiritSignDo
	Omit(cols ...field.Expr) IQrSpiritSignDo
	Join(table schema.Tabler, on ...field.Expr) IQrSpiritSignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrSpiritSignDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrSpiritSignDo
	Group(cols ...field.Expr) IQrSpiritSignDo
	Having(conds ...gen.Condition) IQrSpiritSignDo
	Limit(limit int) IQrSpiritSignDo
	Offset(offset int) IQrSpiritSignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrSpiritSignDo
	Unscoped() IQrSpiritSignDo
	Create(values ...*model.QrSpiritSign) error
	CreateInBatches(values []*model.QrSpiritSign, batchSize int) error
	Save(values ...*model.QrSpiritSign) error
	First() (*model.QrSpiritSign, error)
	Take() (*model.QrSpiritSign, error)
	Last() (*model.QrSpiritSign, error)
	Find() ([]*model.QrSpiritSign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrSpiritSign, err error)
	FindInBatches(result *[]*model.QrSpiritSign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrSpiritSign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrSpiritSignDo
	Assign(attrs ...field.AssignExpr) IQrSpiritSignDo
	Joins(fields ...field.RelationField) IQrSpiritSignDo
	Preload(fields ...field.RelationField) IQrSpiritSignDo
	FirstOrInit() (*model.QrSpiritSign, error)
	FirstOrCreate() (*model.QrSpiritSign, error)
	FindByPage(offset int, limit int) (result []*model.QrSpiritSign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrSpiritSignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrSpiritSignDo) Debug() IQrSpiritSignDo {
	return q.withDO(q.DO.Debug())
}

func (q qrSpiritSignDo) WithContext(ctx context.Context) IQrSpiritSignDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrSpiritSignDo) ReadDB() IQrSpiritSignDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrSpiritSignDo) WriteDB() IQrSpiritSignDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrSpiritSignDo) Session(config *gorm.Session) IQrSpiritSignDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrSpiritSignDo) Clauses(conds ...clause.Expression) IQrSpiritSignDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrSpiritSignDo) Returning(value interface{}, columns ...string) IQrSpiritSignDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrSpiritSignDo) Not(conds ...gen.Condition) IQrSpiritSignDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrSpiritSignDo) Or(conds ...gen.Condition) IQrSpiritSignDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrSpiritSignDo) Select(conds ...field.Expr) IQrSpiritSignDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrSpiritSignDo) Where(conds ...gen.Condition) IQrSpiritSignDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrSpiritSignDo) Order(conds ...field.Expr) IQrSpiritSignDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrSpiritSignDo) Distinct(cols ...field.Expr) IQrSpiritSignDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrSpiritSignDo) Omit(cols ...field.Expr) IQrSpiritSignDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrSpiritSignDo) Join(table schema.Tabler, on ...field.Expr) IQrSpiritSignDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrSpiritSignDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrSpiritSignDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrSpiritSignDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrSpiritSignDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrSpiritSignDo) Group(cols ...field.Expr) IQrSpiritSignDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrSpiritSignDo) Having(conds ...gen.Condition) IQrSpiritSignDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrSpiritSignDo) Limit(limit int) IQrSpiritSignDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrSpiritSignDo) Offset(offset int) IQrSpiritSignDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrSpiritSignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrSpiritSignDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrSpiritSignDo) Unscoped() IQrSpiritSignDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrSpiritSignDo) Create(values ...*model.QrSpiritSign) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrSpiritSignDo) CreateInBatches(values []*model.QrSpiritSign, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrSpiritSignDo) Save(values ...*model.QrSpiritSign) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrSpiritSignDo) First() (*model.QrSpiritSign, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSpiritSign), nil
	}
}

func (q qrSpiritSignDo) Take() (*model.QrSpiritSign, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSpiritSign), nil
	}
}

func (q qrSpiritSignDo) Last() (*model.QrSpiritSign, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSpiritSign), nil
	}
}

func (q qrSpiritSignDo) Find() ([]*model.QrSpiritSign, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrSpiritSign), err
}

func (q qrSpiritSignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrSpiritSign, err error) {
	buf := make([]*model.QrSpiritSign, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrSpiritSignDo) FindInBatches(result *[]*model.QrSpiritSign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrSpiritSignDo) Attrs(attrs ...field.AssignExpr) IQrSpiritSignDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrSpiritSignDo) Assign(attrs ...field.AssignExpr) IQrSpiritSignDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrSpiritSignDo) Joins(fields ...field.RelationField) IQrSpiritSignDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrSpiritSignDo) Preload(fields ...field.RelationField) IQrSpiritSignDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrSpiritSignDo) FirstOrInit() (*model.QrSpiritSign, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSpiritSign), nil
	}
}

func (q qrSpiritSignDo) FirstOrCreate() (*model.QrSpiritSign, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSpiritSign), nil
	}
}

func (q qrSpiritSignDo) FindByPage(offset int, limit int) (result []*model.QrSpiritSign, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrSpiritSignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrSpiritSignDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrSpiritSignDo) Delete(models ...*model.QrSpiritSign) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrSpiritSignDo) withDO(do gen.Dao) *qrSpiritSignDo {
	q.DO = *do.(*gen.DO)
	return q
}
