// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	QrChineseBqb   *qrChineseBqb
	QrFortune      *qrFortune
	QrFortuneDatum *qrFortuneDatum
	QrSignInDatum  *qrSignInDatum
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	QrChineseBqb = &Q.QrChineseBqb
	QrFortune = &Q.QrFortune
	QrFortuneDatum = &Q.QrFortuneDatum
	QrSignInDatum = &Q.QrSignInDatum
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		QrChineseBqb:   newQrChineseBqb(db, opts...),
		QrFortune:      newQrFortune(db, opts...),
		QrFortuneDatum: newQrFortuneDatum(db, opts...),
		QrSignInDatum:  newQrSignInDatum(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	QrChineseBqb   qrChineseBqb
	QrFortune      qrFortune
	QrFortuneDatum qrFortuneDatum
	QrSignInDatum  qrSignInDatum
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		QrChineseBqb:   q.QrChineseBqb.clone(db),
		QrFortune:      q.QrFortune.clone(db),
		QrFortuneDatum: q.QrFortuneDatum.clone(db),
		QrSignInDatum:  q.QrSignInDatum.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		QrChineseBqb:   q.QrChineseBqb.replaceDB(db),
		QrFortune:      q.QrFortune.replaceDB(db),
		QrFortuneDatum: q.QrFortuneDatum.replaceDB(db),
		QrSignInDatum:  q.QrSignInDatum.replaceDB(db),
	}
}

type queryCtx struct {
	QrChineseBqb   IQrChineseBqbDo
	QrFortune      IQrFortuneDo
	QrFortuneDatum IQrFortuneDatumDo
	QrSignInDatum  IQrSignInDatumDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		QrChineseBqb:   q.QrChineseBqb.WithContext(ctx),
		QrFortune:      q.QrFortune.WithContext(ctx),
		QrFortuneDatum: q.QrFortuneDatum.WithContext(ctx),
		QrSignInDatum:  q.QrSignInDatum.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
