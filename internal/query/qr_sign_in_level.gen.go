// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"robot-system-server/internal/model"
)

func newQrSignInLevel(db *gorm.DB, opts ...gen.DOOption) qrSignInLevel {
	_qrSignInLevel := qrSignInLevel{}

	_qrSignInLevel.qrSignInLevelDo.UseDB(db, opts...)
	_qrSignInLevel.qrSignInLevelDo.UseModel(&model.QrSignInLevel{})

	tableName := _qrSignInLevel.qrSignInLevelDo.TableName()
	_qrSignInLevel.ALL = field.NewAsterisk(tableName)
	_qrSignInLevel.ID = field.NewInt64(tableName, "id")
	_qrSignInLevel.Level = field.NewString(tableName, "level")
	_qrSignInLevel.MaxPoints = field.NewInt64(tableName, "max_points")
	_qrSignInLevel.MinPoints = field.NewInt64(tableName, "min_points")
	_qrSignInLevel.GroupID = field.NewInt64(tableName, "group_id")
	_qrSignInLevel.UpdateDate = field.NewField(tableName, "update_date")
	_qrSignInLevel.CreateDate = field.NewField(tableName, "create_date")
	_qrSignInLevel.CreateBy = field.NewString(tableName, "create_by")
	_qrSignInLevel.CreateTime = field.NewField(tableName, "create_time")
	_qrSignInLevel.UpdateBy = field.NewString(tableName, "update_by")
	_qrSignInLevel.UpdateTime = field.NewTime(tableName, "update_time")
	_qrSignInLevel.DelFlag = field.NewField(tableName, "del_flag")

	_qrSignInLevel.fillFieldMap()

	return _qrSignInLevel
}

// qrSignInLevel 等级表
type qrSignInLevel struct {
	qrSignInLevelDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	Level      field.String // 等级
	MaxPoints  field.Int64  // 小于积分
	MinPoints  field.Int64  // 大于积分
	GroupID    field.Int64  // 群组ID
	UpdateDate field.Field  // 更新日期
	CreateDate field.Field  // 创建日期
	CreateBy   field.String // 创建人
	CreateTime field.Field  // 创建时间
	UpdateBy   field.String // 更新人
	UpdateTime field.Time   // 更新时间
	DelFlag    field.Field  // 删除标识;0否1是

	fieldMap map[string]field.Expr
}

func (q qrSignInLevel) Table(newTableName string) *qrSignInLevel {
	q.qrSignInLevelDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrSignInLevel) As(alias string) *qrSignInLevel {
	q.qrSignInLevelDo.DO = *(q.qrSignInLevelDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrSignInLevel) updateTableName(table string) *qrSignInLevel {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Level = field.NewString(table, "level")
	q.MaxPoints = field.NewInt64(table, "max_points")
	q.MinPoints = field.NewInt64(table, "min_points")
	q.GroupID = field.NewInt64(table, "group_id")
	q.UpdateDate = field.NewField(table, "update_date")
	q.CreateDate = field.NewField(table, "create_date")
	q.CreateBy = field.NewString(table, "create_by")
	q.CreateTime = field.NewField(table, "create_time")
	q.UpdateBy = field.NewString(table, "update_by")
	q.UpdateTime = field.NewTime(table, "update_time")
	q.DelFlag = field.NewField(table, "del_flag")

	q.fillFieldMap()

	return q
}

func (q *qrSignInLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrSignInLevel) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 12)
	q.fieldMap["id"] = q.ID
	q.fieldMap["level"] = q.Level
	q.fieldMap["max_points"] = q.MaxPoints
	q.fieldMap["min_points"] = q.MinPoints
	q.fieldMap["group_id"] = q.GroupID
	q.fieldMap["update_date"] = q.UpdateDate
	q.fieldMap["create_date"] = q.CreateDate
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_by"] = q.UpdateBy
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["del_flag"] = q.DelFlag
}

func (q qrSignInLevel) clone(db *gorm.DB) qrSignInLevel {
	q.qrSignInLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrSignInLevel) replaceDB(db *gorm.DB) qrSignInLevel {
	q.qrSignInLevelDo.ReplaceDB(db)
	return q
}

type qrSignInLevelDo struct{ gen.DO }

type IQrSignInLevelDo interface {
	gen.SubQuery
	Debug() IQrSignInLevelDo
	WithContext(ctx context.Context) IQrSignInLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrSignInLevelDo
	WriteDB() IQrSignInLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrSignInLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrSignInLevelDo
	Not(conds ...gen.Condition) IQrSignInLevelDo
	Or(conds ...gen.Condition) IQrSignInLevelDo
	Select(conds ...field.Expr) IQrSignInLevelDo
	Where(conds ...gen.Condition) IQrSignInLevelDo
	Order(conds ...field.Expr) IQrSignInLevelDo
	Distinct(cols ...field.Expr) IQrSignInLevelDo
	Omit(cols ...field.Expr) IQrSignInLevelDo
	Join(table schema.Tabler, on ...field.Expr) IQrSignInLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrSignInLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrSignInLevelDo
	Group(cols ...field.Expr) IQrSignInLevelDo
	Having(conds ...gen.Condition) IQrSignInLevelDo
	Limit(limit int) IQrSignInLevelDo
	Offset(offset int) IQrSignInLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrSignInLevelDo
	Unscoped() IQrSignInLevelDo
	Create(values ...*model.QrSignInLevel) error
	CreateInBatches(values []*model.QrSignInLevel, batchSize int) error
	Save(values ...*model.QrSignInLevel) error
	First() (*model.QrSignInLevel, error)
	Take() (*model.QrSignInLevel, error)
	Last() (*model.QrSignInLevel, error)
	Find() ([]*model.QrSignInLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrSignInLevel, err error)
	FindInBatches(result *[]*model.QrSignInLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrSignInLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrSignInLevelDo
	Assign(attrs ...field.AssignExpr) IQrSignInLevelDo
	Joins(fields ...field.RelationField) IQrSignInLevelDo
	Preload(fields ...field.RelationField) IQrSignInLevelDo
	FirstOrInit() (*model.QrSignInLevel, error)
	FirstOrCreate() (*model.QrSignInLevel, error)
	FindByPage(offset int, limit int) (result []*model.QrSignInLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrSignInLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrSignInLevelDo) Debug() IQrSignInLevelDo {
	return q.withDO(q.DO.Debug())
}

func (q qrSignInLevelDo) WithContext(ctx context.Context) IQrSignInLevelDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrSignInLevelDo) ReadDB() IQrSignInLevelDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrSignInLevelDo) WriteDB() IQrSignInLevelDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrSignInLevelDo) Session(config *gorm.Session) IQrSignInLevelDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrSignInLevelDo) Clauses(conds ...clause.Expression) IQrSignInLevelDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrSignInLevelDo) Returning(value interface{}, columns ...string) IQrSignInLevelDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrSignInLevelDo) Not(conds ...gen.Condition) IQrSignInLevelDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrSignInLevelDo) Or(conds ...gen.Condition) IQrSignInLevelDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrSignInLevelDo) Select(conds ...field.Expr) IQrSignInLevelDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrSignInLevelDo) Where(conds ...gen.Condition) IQrSignInLevelDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrSignInLevelDo) Order(conds ...field.Expr) IQrSignInLevelDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrSignInLevelDo) Distinct(cols ...field.Expr) IQrSignInLevelDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrSignInLevelDo) Omit(cols ...field.Expr) IQrSignInLevelDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrSignInLevelDo) Join(table schema.Tabler, on ...field.Expr) IQrSignInLevelDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrSignInLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrSignInLevelDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrSignInLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrSignInLevelDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrSignInLevelDo) Group(cols ...field.Expr) IQrSignInLevelDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrSignInLevelDo) Having(conds ...gen.Condition) IQrSignInLevelDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrSignInLevelDo) Limit(limit int) IQrSignInLevelDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrSignInLevelDo) Offset(offset int) IQrSignInLevelDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrSignInLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrSignInLevelDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrSignInLevelDo) Unscoped() IQrSignInLevelDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrSignInLevelDo) Create(values ...*model.QrSignInLevel) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrSignInLevelDo) CreateInBatches(values []*model.QrSignInLevel, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrSignInLevelDo) Save(values ...*model.QrSignInLevel) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrSignInLevelDo) First() (*model.QrSignInLevel, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSignInLevel), nil
	}
}

func (q qrSignInLevelDo) Take() (*model.QrSignInLevel, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSignInLevel), nil
	}
}

func (q qrSignInLevelDo) Last() (*model.QrSignInLevel, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSignInLevel), nil
	}
}

func (q qrSignInLevelDo) Find() ([]*model.QrSignInLevel, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrSignInLevel), err
}

func (q qrSignInLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrSignInLevel, err error) {
	buf := make([]*model.QrSignInLevel, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrSignInLevelDo) FindInBatches(result *[]*model.QrSignInLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrSignInLevelDo) Attrs(attrs ...field.AssignExpr) IQrSignInLevelDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrSignInLevelDo) Assign(attrs ...field.AssignExpr) IQrSignInLevelDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrSignInLevelDo) Joins(fields ...field.RelationField) IQrSignInLevelDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrSignInLevelDo) Preload(fields ...field.RelationField) IQrSignInLevelDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrSignInLevelDo) FirstOrInit() (*model.QrSignInLevel, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSignInLevel), nil
	}
}

func (q qrSignInLevelDo) FirstOrCreate() (*model.QrSignInLevel, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrSignInLevel), nil
	}
}

func (q qrSignInLevelDo) FindByPage(offset int, limit int) (result []*model.QrSignInLevel, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrSignInLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrSignInLevelDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrSignInLevelDo) Delete(models ...*model.QrSignInLevel) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrSignInLevelDo) withDO(do gen.Dao) *qrSignInLevelDo {
	q.DO = *do.(*gen.DO)
	return q
}
