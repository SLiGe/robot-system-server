// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"robot-system-server/internal/model"
)

func newQrUser(db *gorm.DB, opts ...gen.DOOption) qrUser {
	_qrUser := qrUser{}

	_qrUser.qrUserDo.UseDB(db, opts...)
	_qrUser.qrUserDo.UseModel(&model.QrUser{})

	tableName := _qrUser.qrUserDo.TableName()
	_qrUser.ALL = field.NewAsterisk(tableName)
	_qrUser.UserID = field.NewInt64(tableName, "user_id")
	_qrUser.LoginName = field.NewString(tableName, "login_name")
	_qrUser.UserName = field.NewString(tableName, "user_name")
	_qrUser.UserType = field.NewString(tableName, "user_type")
	_qrUser.UserQq = field.NewString(tableName, "user_qq")
	_qrUser.Email = field.NewString(tableName, "email")
	_qrUser.PhoneNumber = field.NewString(tableName, "phone_number")
	_qrUser.Sex = field.NewString(tableName, "sex")
	_qrUser.Avatar = field.NewString(tableName, "avatar")
	_qrUser.Password = field.NewString(tableName, "password")
	_qrUser.Salt = field.NewString(tableName, "salt")
	_qrUser.Status = field.NewString(tableName, "status")
	_qrUser.DelFlag = field.NewField(tableName, "del_flag")
	_qrUser.LoginIP = field.NewString(tableName, "login_ip")
	_qrUser.LoginDate = field.NewTime(tableName, "login_date")
	_qrUser.CreateBy = field.NewString(tableName, "create_by")
	_qrUser.CreateTime = field.NewField(tableName, "create_time")
	_qrUser.UpdateBy = field.NewString(tableName, "update_by")
	_qrUser.UpdateTime = field.NewField(tableName, "update_time")
	_qrUser.Remark = field.NewString(tableName, "remark")

	_qrUser.fillFieldMap()

	return _qrUser
}

// qrUser 用户信息表
type qrUser struct {
	qrUserDo

	ALL         field.Asterisk
	UserID      field.Int64  // 用户ID
	LoginName   field.String // 登录账号
	UserName    field.String // 用户昵称
	UserType    field.String // 用户类型（00系统用户  , 01 QQ用户）
	UserQq      field.String // 用户QQ
	Email       field.String // 用户邮箱
	PhoneNumber field.String // 手机号码
	Sex         field.String // 用户性别（0男 1女 2未知）
	Avatar      field.String // 头像路径
	Password    field.String // 密码
	Salt        field.String // 盐加密
	Status      field.String // 帐号状态（1正常 0停用）
	DelFlag     field.Field  // 删除标志（1代表存在 2代表删除）
	LoginIP     field.String // 最后登陆IP
	LoginDate   field.Time   // 最后登陆时间
	CreateBy    field.String // 创建者
	CreateTime  field.Field  // 创建时间
	UpdateBy    field.String // 更新者
	UpdateTime  field.Field  // 更新时间
	Remark      field.String // 备注

	fieldMap map[string]field.Expr
}

func (q qrUser) Table(newTableName string) *qrUser {
	q.qrUserDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrUser) As(alias string) *qrUser {
	q.qrUserDo.DO = *(q.qrUserDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrUser) updateTableName(table string) *qrUser {
	q.ALL = field.NewAsterisk(table)
	q.UserID = field.NewInt64(table, "user_id")
	q.LoginName = field.NewString(table, "login_name")
	q.UserName = field.NewString(table, "user_name")
	q.UserType = field.NewString(table, "user_type")
	q.UserQq = field.NewString(table, "user_qq")
	q.Email = field.NewString(table, "email")
	q.PhoneNumber = field.NewString(table, "phone_number")
	q.Sex = field.NewString(table, "sex")
	q.Avatar = field.NewString(table, "avatar")
	q.Password = field.NewString(table, "password")
	q.Salt = field.NewString(table, "salt")
	q.Status = field.NewString(table, "status")
	q.DelFlag = field.NewField(table, "del_flag")
	q.LoginIP = field.NewString(table, "login_ip")
	q.LoginDate = field.NewTime(table, "login_date")
	q.CreateBy = field.NewString(table, "create_by")
	q.CreateTime = field.NewField(table, "create_time")
	q.UpdateBy = field.NewString(table, "update_by")
	q.UpdateTime = field.NewField(table, "update_time")
	q.Remark = field.NewString(table, "remark")

	q.fillFieldMap()

	return q
}

func (q *qrUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrUser) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 20)
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["login_name"] = q.LoginName
	q.fieldMap["user_name"] = q.UserName
	q.fieldMap["user_type"] = q.UserType
	q.fieldMap["user_qq"] = q.UserQq
	q.fieldMap["email"] = q.Email
	q.fieldMap["phone_number"] = q.PhoneNumber
	q.fieldMap["sex"] = q.Sex
	q.fieldMap["avatar"] = q.Avatar
	q.fieldMap["password"] = q.Password
	q.fieldMap["salt"] = q.Salt
	q.fieldMap["status"] = q.Status
	q.fieldMap["del_flag"] = q.DelFlag
	q.fieldMap["login_ip"] = q.LoginIP
	q.fieldMap["login_date"] = q.LoginDate
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_by"] = q.UpdateBy
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["remark"] = q.Remark
}

func (q qrUser) clone(db *gorm.DB) qrUser {
	q.qrUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrUser) replaceDB(db *gorm.DB) qrUser {
	q.qrUserDo.ReplaceDB(db)
	return q
}

type qrUserDo struct{ gen.DO }

type IQrUserDo interface {
	gen.SubQuery
	Debug() IQrUserDo
	WithContext(ctx context.Context) IQrUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrUserDo
	WriteDB() IQrUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrUserDo
	Not(conds ...gen.Condition) IQrUserDo
	Or(conds ...gen.Condition) IQrUserDo
	Select(conds ...field.Expr) IQrUserDo
	Where(conds ...gen.Condition) IQrUserDo
	Order(conds ...field.Expr) IQrUserDo
	Distinct(cols ...field.Expr) IQrUserDo
	Omit(cols ...field.Expr) IQrUserDo
	Join(table schema.Tabler, on ...field.Expr) IQrUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrUserDo
	Group(cols ...field.Expr) IQrUserDo
	Having(conds ...gen.Condition) IQrUserDo
	Limit(limit int) IQrUserDo
	Offset(offset int) IQrUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrUserDo
	Unscoped() IQrUserDo
	Create(values ...*model.QrUser) error
	CreateInBatches(values []*model.QrUser, batchSize int) error
	Save(values ...*model.QrUser) error
	First() (*model.QrUser, error)
	Take() (*model.QrUser, error)
	Last() (*model.QrUser, error)
	Find() ([]*model.QrUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrUser, err error)
	FindInBatches(result *[]*model.QrUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrUserDo
	Assign(attrs ...field.AssignExpr) IQrUserDo
	Joins(fields ...field.RelationField) IQrUserDo
	Preload(fields ...field.RelationField) IQrUserDo
	FirstOrInit() (*model.QrUser, error)
	FirstOrCreate() (*model.QrUser, error)
	FindByPage(offset int, limit int) (result []*model.QrUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrUserDo) Debug() IQrUserDo {
	return q.withDO(q.DO.Debug())
}

func (q qrUserDo) WithContext(ctx context.Context) IQrUserDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrUserDo) ReadDB() IQrUserDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrUserDo) WriteDB() IQrUserDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrUserDo) Session(config *gorm.Session) IQrUserDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrUserDo) Clauses(conds ...clause.Expression) IQrUserDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrUserDo) Returning(value interface{}, columns ...string) IQrUserDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrUserDo) Not(conds ...gen.Condition) IQrUserDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrUserDo) Or(conds ...gen.Condition) IQrUserDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrUserDo) Select(conds ...field.Expr) IQrUserDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrUserDo) Where(conds ...gen.Condition) IQrUserDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrUserDo) Order(conds ...field.Expr) IQrUserDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrUserDo) Distinct(cols ...field.Expr) IQrUserDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrUserDo) Omit(cols ...field.Expr) IQrUserDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrUserDo) Join(table schema.Tabler, on ...field.Expr) IQrUserDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrUserDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrUserDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrUserDo) Group(cols ...field.Expr) IQrUserDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrUserDo) Having(conds ...gen.Condition) IQrUserDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrUserDo) Limit(limit int) IQrUserDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrUserDo) Offset(offset int) IQrUserDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrUserDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrUserDo) Unscoped() IQrUserDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrUserDo) Create(values ...*model.QrUser) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrUserDo) CreateInBatches(values []*model.QrUser, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrUserDo) Save(values ...*model.QrUser) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrUserDo) First() (*model.QrUser, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUser), nil
	}
}

func (q qrUserDo) Take() (*model.QrUser, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUser), nil
	}
}

func (q qrUserDo) Last() (*model.QrUser, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUser), nil
	}
}

func (q qrUserDo) Find() ([]*model.QrUser, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrUser), err
}

func (q qrUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrUser, err error) {
	buf := make([]*model.QrUser, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrUserDo) FindInBatches(result *[]*model.QrUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrUserDo) Attrs(attrs ...field.AssignExpr) IQrUserDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrUserDo) Assign(attrs ...field.AssignExpr) IQrUserDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrUserDo) Joins(fields ...field.RelationField) IQrUserDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrUserDo) Preload(fields ...field.RelationField) IQrUserDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrUserDo) FirstOrInit() (*model.QrUser, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUser), nil
	}
}

func (q qrUserDo) FirstOrCreate() (*model.QrUser, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrUser), nil
	}
}

func (q qrUserDo) FindByPage(offset int, limit int) (result []*model.QrUser, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrUserDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrUserDo) Delete(models ...*model.QrUser) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrUserDo) withDO(do gen.Dao) *qrUserDo {
	q.DO = *do.(*gen.DO)
	return q
}
